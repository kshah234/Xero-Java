name: Build, Test, Lint, Release, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  JAVA_VERSION: 21
  NODE_VERSION: 20

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      java_version: ${{ steps.setup-java.outputs.java_version }}
      node_version: ${{ steps.setup-node.outputs.node_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        id: setup-java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Set up Node.js
        id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

  build:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Import GPG private key
        run: echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Set GPG passphrase
        run: export GPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}

      - name: Build and Sign Artifacts
        run: |
          export GPG_TTY=$(tty)
          mvn clean verify -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}

  commitlint:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Validate PR commits with commitlint
        run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Publish package
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Artifacts
        run: |
          export GPG_TTY=$(tty)
          mvn clean deploy -P release -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}
